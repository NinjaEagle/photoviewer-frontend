{"ast":null,"code":"var _jsxFileName = \"/Users/kevinw/projects/photoviewer-frontend/src/components/ImageIndex.js\";\nimport React, { Component } from 'react';\nimport { Pagination, Container, Divider, Grid, Dimmer, Loader } from 'semantic-ui-react';\nimport PostCard from '../components/PostCard.js';\nimport Filter from '../components/Filter';\nimport GrayScale from '../components/Grayscale';\n\nclass ImageIndex extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      imageIndex: [],\n      activePage: 1,\n      dimension: '',\n      toggle: false\n    };\n\n    this.initialState = resData => {\n      console.log(resData);\n      this.setState({\n        // loading finished so update state to false\n        loading: false,\n        imageIndex: resData,\n        activePage: resData.page\n      });\n    };\n\n    this.setFilterTerm = term => {\n      console.log(term);\n      this.setState({\n        dimension: term\n      });\n    };\n\n    this.grayScaleToggle = toggle => {\n      console.log(toggle);\n    };\n\n    this.handlePage = (e, {\n      activePage\n    }) => {\n      let goToPage = {\n        activePage\n      };\n      let pagenum = goToPage.activePage;\n      let pagestring = pagenum.toString();\n      console.log(pagestring);\n      this.setState({\n        loading: true\n      });\n      const url = `http://localhost:3000/images/?page=` + pagestring;\n      fetch(url).then(res => res.json()).then(this.initialState);\n    };\n  }\n\n  componentDidMount() {\n    fetch(`http://localhost:3000/images`).then(res => res.json()).then(this.initialState);\n  }\n\n  //\n  filterPictures() {\n    const pictureGrid = [...this.state.imageIndex.images];\n    const newFilteredImages = [];\n    const imageDimension = pictureGrid.map(image => {\n      newFilteredImages.push(image.url.split('/').slice(5, 7));\n    });\n    console.log(imageDimension);\n    let filteredList = []; // Filtering the spots by matching up the dimension with the dimension selected\n\n    if (this.state.dimension === \"\") filteredList = pictureGrid;else {\n      filteredList = filteredList.filter(picture => picture === this.state.dimension);\n    }\n    return filteredList.map(image => {\n      return React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(PostCard, {\n        key: image.id,\n        image: image,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }));\n    });\n  } // handles the active page and toggles through the pages\n\n\n  render() {\n    console.log(this.state); // show while pictures are not loaded\n\n    if (this.state.loading) {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Dimmer, {\n        active: true,\n        inverted: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Loading Images...\")));\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(Container, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Photo Viewer App\"), React.createElement(Filter, {\n      setFilterTerm: this.setFilterTerm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(GrayScale, {\n      imageData: this.state.imageIndex,\n      grayScaleToggle: this.grayScaleToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(Pagination, {\n      onPageChange: this.handlePage,\n      size: \"mini\",\n      siblingRange: \"4\",\n      defaultActivePage: this.state.imageIndex.page,\n      totalPages: this.state.imageIndex.pages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      relaxed: true,\n      columns: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.filterPictures()));\n  }\n\n}\n\nexport default ImageIndex;","map":{"version":3,"sources":["/Users/kevinw/projects/photoviewer-frontend/src/components/ImageIndex.js"],"names":["React","Component","Pagination","Container","Divider","Grid","Dimmer","Loader","PostCard","Filter","GrayScale","ImageIndex","state","loading","imageIndex","activePage","dimension","toggle","initialState","resData","console","log","setState","page","setFilterTerm","term","grayScaleToggle","handlePage","e","goToPage","pagenum","pagestring","toString","url","fetch","then","res","json","componentDidMount","filterPictures","pictureGrid","images","newFilteredImages","imageDimension","map","image","push","split","slice","filteredList","filter","picture","id","render","pages"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Pagination, Container, Divider, Grid, Dimmer, Loader} from 'semantic-ui-react'; \nimport PostCard from '../components/PostCard.js';\nimport Filter from '../components/Filter';\nimport GrayScale from '../components/Grayscale';\n\nclass ImageIndex extends Component {\n\n    state = {\n        loading: true,\n        imageIndex: [],\n        activePage:1,\n        dimension:'',\n        toggle: false   \n    }\n\n    componentDidMount(){\n        fetch(`http://localhost:3000/images`)\n        .then(res => res.json())\n        .then(this.initialState)\n    }\n\n    initialState = (resData) => {\n        console.log(resData)\n        this.setState({\n            // loading finished so update state to false\n            loading: false,\n            imageIndex: resData,\n            activePage: resData.page\n        })\n    }\n\n    setFilterTerm = (term) => {\n        console.log(term)\n        this.setState({\n          dimension: term\n        })\n    }\n\n    grayScaleToggle = (toggle) => {\n        console.log(toggle)\n    }\n\n    //\n    filterPictures(){\n        const pictureGrid = [...this.state.imageIndex.images];\n        const newFilteredImages = [];\n        const imageDimension = pictureGrid.map(image => {newFilteredImages.push(image.url.split('/').slice(5,7))});\n        console.log(imageDimension);\n        \n        let filteredList = [];\n        // Filtering the spots by matching up the dimension with the dimension selected\n        if(this.state.dimension === \"\") filteredList = pictureGrid;\n        else {\n            filteredList = filteredList.filter(picture => \n                picture === this.state.dimension)\n        }\n        return(\n            filteredList.map(image => {\n                   return( <Grid.Column>\n                        <PostCard key={image.id} image={image}/>\n                    </Grid.Column>)\n            })\n        )\n    }\n    \n// handles the active page and toggles through the pages\n    handlePage = (e, { activePage }) => {\n        let goToPage = { activePage }\n        let pagenum = goToPage.activePage\n        let pagestring = pagenum.toString()\n        console.log(pagestring)\n        this.setState({\n        loading: true\n        })\n        const url = `http://localhost:3000/images/?page=` + pagestring\n\n        fetch(url)\n        .then(res => res.json())\n        .then(this.initialState)\n    }\n\n    render(){\n        console.log(this.state)\n\n        // show while pictures are not loaded\n        if(this.state.loading){\n            return(\n                <Container>\n                <Dimmer active inverted>\n                  <Loader>Loading Images...</Loader>\n                </Dimmer>\n              </Container>\n            )\n        }\n\n        return (\n            <Container>\n                <Divider hidden />\n                <Container textAlign='center'>\n                <h1>Photo Viewer App</h1>\n                 <Filter setFilterTerm={this.setFilterTerm}/>\n                 <Divider hidden />\n                 <GrayScale imageData={this.state.imageIndex} grayScaleToggle={this.grayScaleToggle}/>\n                 <Divider hidden />\n                <Pagination  onPageChange={this.handlePage} size='mini' siblingRange=\"4\" defaultActivePage={this.state.imageIndex.page} totalPages={this.state.imageIndex.pages} />\n                </Container>\n                    <Divider hidden />\n                <Grid relaxed columns={5}>\n                {/* { this.state.imageIndex.images.map(image => {\n                    return (\n                    <Grid.Column>\n                        <PostCard key={image.id} image={image}/>\n                    </Grid.Column>)\n                }) } */}\n                  {this.filterPictures()}\n                </Grid>\n\n            </Container>\n        );\n    }\n}\n\nexport default ImageIndex;"]},"metadata":{},"sourceType":"module"}