{"ast":null,"code":"var _jsxFileName = \"/Users/kevinw/projects/photoviewer-frontend/src/components/ImageIndex.js\";\nimport React, { Component } from 'react';\nimport { Pagination, Container, Divider, Grid, Dimmer, Loader } from 'semantic-ui-react';\nimport PostCard from '../components/PostCard.js';\nimport Filter from '../components/Filter';\nimport GrayScale from '../components/Grayscale';\n\nclass ImageIndex extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      imageIndex: [],\n      allImgs: [],\n      activePage: 1,\n      dimension: '',\n      grayScaleToggle: false\n    };\n\n    this.initialState = resData => {\n      console.log(resData);\n      this.setState({\n        // loading finished so update state to false\n        loading: false,\n        imageIndex: resData,\n        activePage: resData.page\n      }); // sessionStorage.setItem('pictures', JSON.stringify(resData))\n      // let obj = JSON.parse(sessionStorage.pictures);\n      // console.log(obj);\n    };\n\n    this.setFilterTerm = term => {\n      console.log(term);\n      this.setState({\n        dimension: term\n      });\n    };\n\n    this.toggleSwitch = evt => {\n      evt.preventDefault();\n      this.setState({\n        grayScaleToggle: !this.state.grayScaleToggle\n      });\n    };\n\n    this.handlePage = (e, {\n      activePage\n    }) => {\n      let goToPage = {\n        activePage\n      };\n      let pagenum = goToPage.activePage;\n      let pagestring = pagenum.toString();\n      console.log(pagestring);\n      this.setState({\n        loading: true\n      });\n      const url = `http://localhost:3000/images/?page=` + pagestring;\n      fetch(url).then(res => res.json()).then(this.initialState);\n    };\n  }\n\n  componentDidMount() {\n    fetch(`http://localhost:3000/images`).then(res => res.json()).then(this.initialState);\n    fetch(`http://localhost:3000/get_All_Pictures`).then(res => res.json()).then(data => this.setState({\n      allImgs: data\n    }));\n  } // componentDidMount(){\n  //     fetch(`http://localhost:3000/get_All_Pictures`)\n  //     .then(res => res.json())\n  //     .then(data => this.setState({allImgs: data}))\n  // }\n  // filter throught images \n  // allImgs.filter(()=>{this.state.dimension ===  })\n\n\n  // 1. render only pagenation or filtered array\n  // 2. figure out how to filter dimentions \n  display10PerPage() {\n    const imageIndex = this.state.imageIndex;\n    return React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(PostCard, {\n      grayScaleToggle: this.state.grayScaleToggle,\n      key: image.id,\n      image: image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }));\n  }\n\n  filterPictures() {\n    const pictureGrid = [...this.state.allImgs];\n    debugger;\n    console.log(pictureGrid);\n    let newFilteredList = [];\n    pictureGrid.map(image => {\n      newFilteredList.push(images.url.split('/').slice(5, 7).join('/'));\n    });\n    console.log(newFilteredList); // Filtering the spots by matching up the dimension with the dimension selected\n\n    if (this.state.dimension === \"\") newFilteredList = pictureGrid; // else {\n    //     newFilteredList = newFilteredList.filter(picture => picture === this.state.dimension)\n    // }\n\n    return newFilteredList.map(image => {\n      return React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(PostCard, {\n        grayScaleToggle: this.state.grayScaleToggle,\n        key: image.id,\n        image: image,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }));\n    });\n  } // handles the active page and toggles through the pages\n\n\n  render() {\n    console.log(this.state); // show while pictures are not loaded\n\n    if (this.state.loading) {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Dimmer, {\n        active: true,\n        inverted: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Loading Images...\")));\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(Container, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Photo Viewer App\"), React.createElement(Filter, {\n      setFilterTerm: this.setFilterTerm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      class: \"ui toggle checkbox\",\n      onClick: this.toggleSwitch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      name: \"public\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Toggle Grayscale\")), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(Pagination, {\n      onPageChange: this.handlePage,\n      size: \"mini\",\n      siblingRange: \"4\",\n      defaultActivePage: this.state.imageIndex.page,\n      totalPages: this.state.imageIndex.pages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      relaxed: true,\n      columns: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, this.filterPictures()));\n  }\n\n}\n\nexport default ImageIndex;","map":{"version":3,"sources":["/Users/kevinw/projects/photoviewer-frontend/src/components/ImageIndex.js"],"names":["React","Component","Pagination","Container","Divider","Grid","Dimmer","Loader","PostCard","Filter","GrayScale","ImageIndex","state","loading","imageIndex","allImgs","activePage","dimension","grayScaleToggle","initialState","resData","console","log","setState","page","setFilterTerm","term","toggleSwitch","evt","preventDefault","handlePage","e","goToPage","pagenum","pagestring","toString","url","fetch","then","res","json","componentDidMount","data","display10PerPage","image","id","filterPictures","pictureGrid","newFilteredList","map","push","images","split","slice","join","render","pages"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,UAAR,EAAoBC,SAApB,EAA+BC,OAA/B,EAAwCC,IAAxC,EAA8CC,MAA9C,EAAsDC,MAAtD,QAAmE,mBAAnE;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAEA,MAAMC,UAAN,SAAyBV,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAE/BW,KAF+B,GAEvB;AACJC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,UAAU,EAAE,EAFR;AAGJC,MAAAA,OAAO,EAAE,EAHL;AAIJC,MAAAA,UAAU,EAAC,CAJP;AAKJC,MAAAA,SAAS,EAAC,EALN;AAMJC,MAAAA,eAAe,EAAE;AANb,KAFuB;;AAAA,SA4B/BC,YA5B+B,GA4BfC,OAAD,IAAa;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,WAAKG,QAAL,CAAc;AACV;AACAV,QAAAA,OAAO,EAAE,KAFC;AAGVC,QAAAA,UAAU,EAAEM,OAHF;AAIVJ,QAAAA,UAAU,EAAEI,OAAO,CAACI;AAJV,OAAd,EAFwB,CASxB;AACA;AACA;AACH,KAxC8B;;AAAA,SA0C/BC,aA1C+B,GA0CdC,IAAD,IAAU;AACtBL,MAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACA,WAAKH,QAAL,CAAc;AACZN,QAAAA,SAAS,EAAES;AADC,OAAd;AAGH,KA/C8B;;AAAA,SAkD/BC,YAlD+B,GAkDhBC,GAAG,IAAI;AAClBA,MAAAA,GAAG,CAACC,cAAJ;AACI,WAAKN,QAAL,CAAc;AACVL,QAAAA,eAAe,EAAE,CAAC,KAAKN,KAAL,CAAWM;AADnB,OAAd;AAGP,KAvD8B;;AAAA,SA4F/BY,UA5F+B,GA4FlB,CAACC,CAAD,EAAI;AAAEf,MAAAA;AAAF,KAAJ,KAAuB;AAChC,UAAIgB,QAAQ,GAAG;AAAEhB,QAAAA;AAAF,OAAf;AACA,UAAIiB,OAAO,GAAGD,QAAQ,CAAChB,UAAvB;AACA,UAAIkB,UAAU,GAAGD,OAAO,CAACE,QAAR,EAAjB;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAYY,UAAZ;AACA,WAAKX,QAAL,CAAc;AACdV,QAAAA,OAAO,EAAE;AADK,OAAd;AAGA,YAAMuB,GAAG,GAAI,qCAAD,GAAwCF,UAApD;AAEAG,MAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEM,KAAKnB,YAFX;AAGH,KAzG8B;AAAA;;AAW/BsB,EAAAA,iBAAiB,GAAE;AACfJ,IAAAA,KAAK,CAAE,8BAAF,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEM,KAAKnB,YAFX;AAGAkB,IAAAA,KAAK,CAAE,wCAAF,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMI,IAAI,IAAI,KAAKnB,QAAL,CAAc;AAACR,MAAAA,OAAO,EAAE2B;AAAV,KAAd,CAFd;AAGH,GAlB8B,CAoB/B;AACA;AACA;AACA;AACA;AACA;AACA;;;AA+BA;AACA;AAEAC,EAAAA,gBAAgB,GAAE;AAAA,UACP7B,UADO,GACO,KAAKF,KADZ,CACPE,UADO;AAGd,WACC,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,oBAAC,QAAD;AAAU,MAAA,eAAe,EAAE,KAAKF,KAAL,CAAWM,eAAtC;AAAuD,MAAA,GAAG,EAAE0B,KAAK,CAACC,EAAlE;AAAsE,MAAA,KAAK,EAAED,KAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADD;AAKH;;AACDE,EAAAA,cAAc,GAAE;AACZ,UAAMC,WAAW,GAAG,CAAC,GAAG,KAAKnC,KAAL,CAAWG,OAAf,CAApB;AACA;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYyB,WAAZ;AACA,QAAIC,eAAe,GAAG,EAAtB;AACAD,IAAAA,WAAW,CAACE,GAAZ,CAAgBL,KAAK,IAAI;AAAEI,MAAAA,eAAe,CAACE,IAAhB,CAAqBC,MAAM,CAACf,GAAP,CAAWgB,KAAX,CAAiB,GAAjB,EAAsBC,KAAtB,CAA4B,CAA5B,EAA8B,CAA9B,EAAiCC,IAAjC,CAAsC,GAAtC,CAArB;AAAiE,KAA5F;AACAjC,IAAAA,OAAO,CAACC,GAAR,CAAY0B,eAAZ,EANY,CAQZ;;AACA,QAAG,KAAKpC,KAAL,CAAWK,SAAX,KAAyB,EAA5B,EAAgC+B,eAAe,GAAGD,WAAlB,CATpB,CAUZ;AACA;AACA;;AACA,WACIC,eAAe,CAACC,GAAhB,CAAoBL,KAAK,IAAI;AACzB,aAAQ,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACJ,oBAAC,QAAD;AAAU,QAAA,eAAe,EAAE,KAAKhC,KAAL,CAAWM,eAAtC;AAAuD,QAAA,GAAG,EAAE0B,KAAK,CAACC,EAAlE;AAAsE,QAAA,KAAK,EAAED,KAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADI,CAAR;AAGH,KAJD,CADJ;AAOH,GAzF8B,CA2FnC;;;AAgBIW,EAAAA,MAAM,GAAE;AACJlC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAjB,EADI,CAGJ;;AACA,QAAG,KAAKA,KAAL,CAAWC,OAAd,EAAsB;AAClB,aACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,MAAM,MAAd;AAAe,QAAA,QAAQ,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CADA,CADJ;AAOH;;AAED,WACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,OAAD;AAAS,MAAA,MAAM,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADA,EAEC,oBAAC,MAAD;AAAQ,MAAA,aAAa,EAAE,KAAKY,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,EAGC;AAAK,MAAA,KAAK,EAAC,oBAAX;AAAgC,MAAA,OAAO,EAAE,KAAKE,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,IAAI,EAAC,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,EAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFH,CAHD,EAOC,oBAAC,OAAD;AAAS,MAAA,MAAM,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPD,EAQA,oBAAC,UAAD;AAAa,MAAA,YAAY,EAAE,KAAKG,UAAhC;AAA4C,MAAA,IAAI,EAAC,MAAjD;AAAwD,MAAA,YAAY,EAAC,GAArE;AAAyE,MAAA,iBAAiB,EAAE,KAAKlB,KAAL,CAAWE,UAAX,CAAsBU,IAAlH;AAAwH,MAAA,UAAU,EAAE,KAAKZ,KAAL,CAAWE,UAAX,CAAsB0C,KAA1J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARA,CAFJ,EAYQ,oBAAC,OAAD;AAAS,MAAA,MAAM,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZR,EAaI,oBAAC,IAAD;AAAM,MAAA,OAAO,MAAb;AAAc,MAAA,OAAO,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOG,KAAKV,cAAL,EAPH,CAbJ,CADJ;AA0BH;;AAnJ8B;;AAsJnC,eAAenC,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport {Pagination, Container, Divider, Grid, Dimmer, Loader} from 'semantic-ui-react'; \nimport PostCard from '../components/PostCard.js';\nimport Filter from '../components/Filter';\nimport GrayScale from '../components/Grayscale';\n\nclass ImageIndex extends Component {\n\n    state = {\n        loading: true,\n        imageIndex: [],\n        allImgs: [],\n        activePage:1,\n        dimension:'',\n        grayScaleToggle: false   \n    }\n\n    componentDidMount(){\n        fetch(`http://localhost:3000/images`)\n        .then(res => res.json())\n        .then(this.initialState) \n        fetch(`http://localhost:3000/get_All_Pictures`)\n        .then(res => res.json())\n        .then(data => this.setState({allImgs: data}))\n    }\n\n    // componentDidMount(){\n    //     fetch(`http://localhost:3000/get_All_Pictures`)\n    //     .then(res => res.json())\n    //     .then(data => this.setState({allImgs: data}))\n    // }\n    // filter throught images \n    // allImgs.filter(()=>{this.state.dimension ===  })\n\n    initialState = (resData) => {\n        console.log(resData)\n        this.setState({\n            // loading finished so update state to false\n            loading: false,\n            imageIndex: resData,\n            activePage: resData.page\n        })\n    \n        // sessionStorage.setItem('pictures', JSON.stringify(resData))\n        // let obj = JSON.parse(sessionStorage.pictures);\n        // console.log(obj);\n    }\n\n    setFilterTerm = (term) => {\n        console.log(term)\n        this.setState({\n          dimension: term\n        })\n    }\n\n\n    toggleSwitch = evt => {\n        evt.preventDefault();\n            this.setState({ \n                grayScaleToggle: !this.state.grayScaleToggle,\n            })\n    }\n\n    // 1. render only pagenation or filtered array\n    // 2. figure out how to filter dimentions \n\n    display10PerPage(){\n        const {imageIndex} = this.state;\n\n        return( \n         <Grid.Column>\n            <PostCard grayScaleToggle={this.state.grayScaleToggle} key={image.id} image={image}/>\n         </Grid.Column>\n        )\n    }\n    filterPictures(){\n        const pictureGrid = [...this.state.allImgs];\n        debugger \n        console.log(pictureGrid);\n        let newFilteredList = [];\n        pictureGrid.map(image => { newFilteredList.push(images.url.split('/').slice(5,7).join('/'))});\n        console.log(newFilteredList);\n        \n        // Filtering the spots by matching up the dimension with the dimension selected\n        if(this.state.dimension === \"\") newFilteredList = pictureGrid;\n        // else {\n        //     newFilteredList = newFilteredList.filter(picture => picture === this.state.dimension)\n        // }\n        return(\n            newFilteredList.map(image => {\n                return( <Grid.Column>\n                    <PostCard grayScaleToggle={this.state.grayScaleToggle} key={image.id} image={image}/>\n                </Grid.Column>)\n            })\n        )\n    }\n    \n// handles the active page and toggles through the pages\n    handlePage = (e, { activePage }) => {\n        let goToPage = { activePage }\n        let pagenum = goToPage.activePage\n        let pagestring = pagenum.toString()\n        console.log(pagestring)\n        this.setState({\n        loading: true\n        })\n        const url = `http://localhost:3000/images/?page=` + pagestring\n\n        fetch(url)\n        .then(res => res.json())\n        .then(this.initialState)\n    }\n\n    render(){\n        console.log(this.state)\n\n        // show while pictures are not loaded\n        if(this.state.loading){\n            return(\n                <Container>\n                <Dimmer active inverted>\n                  <Loader>Loading Images...</Loader>\n                </Dimmer>\n              </Container>\n            )\n        }\n\n        return (\n            <Container>\n                <Divider hidden />\n                <Container textAlign='center'>\n                <h1>Photo Viewer App</h1>\n                 <Filter setFilterTerm={this.setFilterTerm}/>\n                 <div class=\"ui toggle checkbox\" onClick={this.toggleSwitch}>\n                    <input type=\"checkbox\" name=\"public\" />\n                    <label>Toggle Grayscale</label>\n                </div> \n                 <Divider hidden />\n                <Pagination  onPageChange={this.handlePage} size='mini' siblingRange=\"4\" defaultActivePage={this.state.imageIndex.page} totalPages={this.state.imageIndex.pages} />\n                </Container>\n                    <Divider hidden />\n                <Grid relaxed columns={5}>\n                {/* { this.state.imageIndex.images.map(image => {\n                    return (\n                    <Grid.Column>\n                        <PostCard key={image.id} image={image}/>\n                    </Grid.Column>)\n                }) } */}\n                  {this.filterPictures()}\n                </Grid>\n\n            </Container>\n        );\n    }\n}\n\nexport default ImageIndex;"]},"metadata":{},"sourceType":"module"}