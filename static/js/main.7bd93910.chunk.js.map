{"version":3,"sources":["components/PostCard.js","components/Filter.js","components/ImageIndex.js","App.js","serviceWorker.js","index.js"],"names":["PostCard","imageUrl","this","props","image","url","imageWidth","split","imageHeight","expandlink","id","grayScaleImg","concat","Card","color","grayScaleToggle","href","Image","src","height","Content","Header","title","Meta","Description","extra","Icon","name","Component","Filter","state","dimension","handleChange","e","console","log","target","setState","value","className","onChange","event","setFilterTerm","ImageIndex","loading","imageIndex","allImgs","activePage","initialState","resData","page","term","toggleSwitch","evt","preventDefault","handlePage","pagestring","toString","fetch","then","res","json","data","images","pictureGrid","filter","picture","includes","map","Grid","Column","key","Container","Dimmer","active","inverted","Loader","Divider","hidden","textAlign","Checkbox","onClick","toggle","Pagination","onPageChange","size","siblingRange","defaultActivePage","totalPages","pages","relaxed","columns","filterPictures","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7bd93910.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Icon, Image } from 'semantic-ui-react';\n\n\nclass PostCard extends Component {\n\n    render() {\n        const imageUrl = this.props.image.url;\n        const imageWidth = imageUrl.split('/')[5]\n        const imageHeight = imageUrl.split('/')[6]\n        const expandlink = '/images/' + this.props.image.id + '/'\n        const grayScaleImg = imageUrl.concat(\"?grayscale\");\n\n\n        // for the future, I want to implement the like photo feature\n        return (\n        <div>\n            <Card color='blue'>\n            {this.props.grayScaleToggle? <a href={expandlink}><Image src={grayScaleImg} height /></a>\n                 : \n            <a href={expandlink}><Image src={imageUrl} height /></a>}\n\n                <Card.Content>\n                \n                <Card.Header><a href={expandlink}>{this.props.image.title}</a></Card.Header>\n                <Card.Meta>\n                </Card.Meta>\n                <Card.Description> Image {this.props.image.id} <br></br>\n                {imageWidth} by {imageHeight}</Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n\n                <a href=\"Image\">\n                <Icon name='like' />\n            \n                </a>\n            </Card.Content>\n            </Card>\n        </div>\n        );\n    }\n}\n\nexport default PostCard;","import React, { Component } from 'react';\n\nclass Filter extends Component {\n    state = {\n        dimension: '',\n    };\n    \n      handleChange = e => {\n          console.log(e.target)\n        this.setState({ [e.target.name]: e.target.value });\n      };\n\n\n    render() {\n\n        return (\n            <div>\n                <h3>Filter By:</h3>\n                \n                <div className=\"twelve wide field\">\n                    <select onChange= {event => this.props.setFilterTerm(event.target.value)} value={this.state.dimension} name=\"dimension\" className =\"ui fluid dropdown\">\n                    <option value=\"\">Select Dimension</option>\n                    <option value=\"\">No Filter</option>\n                  <option value=\"300/200\" >300 x 200</option>\n                  <option value=\"100/100\" >100 x 100</option>\n                  <option value=\"250/250\" >250 x 250</option>\n                  <option value=\"400/200\" >400 x 200</option>\n                  <option value=\"300/300\" >300 x 300</option>\n                </select>\n                </div>\n            </div>    \n\n        );\n    }\n}\n\nexport default Filter;","import React, { Component } from 'react';\nimport {Pagination, Container, Divider, Grid, Dimmer, Loader, Checkbox} from 'semantic-ui-react'; \nimport PostCard from '../components/PostCard.js';\nimport Filter from '../components/Filter';\nimport  '../imageindex.css'\n\nclass ImageIndex extends Component {\n    \n    state = {\n        loading: true,\n        imageIndex: [],\n        allImgs: [],\n        activePage:1,\n        dimension:'',\n        grayScaleToggle: false   \n    }\n\n    componentDidMount(){\n        // change fetch below from 20 to 21 as backend is deployed to heroku\n         // fetch(`http://localhost:3000/get_All_Pictures`)\n         fetch(\"https://photoviewer-backend.herokuapp.com/get_All_Pictures\")\n         .then(res => res.json())\n         .then(data => this.setState({allImgs: data.images}));\n        // changed fetch below from 24 to 25\n        // fetch(`http://localhost:3000/images`)\n        fetch(\"https://photoviewer-backend.herokuapp.com/images\")\n        .then(res => res.json())\n        .then(this.initialState); \n       \n    }\n\n\n    initialState = (resData) => {\n        this.setState({\n            // loading finished so update state to false\n            loading: false,\n            imageIndex: resData,\n            activePage: resData.page\n        })\n    \n        // sessionStorage.setItem('pictures', JSON.stringify(resData))\n        // let obj = JSON.parse(sessionStorage.pictures);\n        // consoleg.log(obj)\n    }\n\n    setFilterTerm = (term) => {\n        this.setState({\n          dimension: term\n        })\n    }\n\n\n    toggleSwitch = evt => {\n        evt.preventDefault();\n            this.setState({ \n                grayScaleToggle: !this.state.grayScaleToggle,\n            })\n    }\n\n\n    //filter dimentions function\n\n    filterPictures(){\n        const pictureGrid = [...this.state.allImgs];\n        let newFilteredList = [];\n        // Filtering the spots by matching up the dimension with the dimension selected\n        if(this.state.dimension === \"\") newFilteredList = [...this.state.imageIndex.images];\n        // dimension selected from filter list\n        else {\n            newFilteredList = pictureGrid.filter(picture => picture.url.includes(this.state.dimension))\n        }\n        return(\n            newFilteredList.map(image => {\n                return( <Grid.Column>\n                    <PostCard grayScaleToggle={this.state.grayScaleToggle} key={image.id} image={image}/>\n                </Grid.Column>)\n            })\n        )\n    }\n    \n// handles the active page and toggles through the pages\n    handlePage = (e, { activePage }) => {\n        let goToPage = { activePage }\n        let pagenum = goToPage.activePage\n        let pagestring = pagenum.toString()\n        this.setState({\n        loading: true\n        })\n        // const url = `http://localhost:3000/images/?page=` + pagestring\n        const url = `https://photoviewer-backend.herokuapp.com/images/?page=`+ pagestring\n\n        fetch(url)\n        .then(res => res.json())\n        .then(this.initialState)\n    }\n\n    render(){\n\n        // show while pictures are not loaded\n        if(this.state.loading){\n            return(\n                <Container>\n                <Dimmer active inverted>\n                  <Loader>Loading Images...</Loader>\n                </Dimmer>\n              </Container>\n            )\n        }\n\n        return (\n            <div>\n            <Container >\n                <Divider hidden />\n                <Container  textAlign='center'>\n                    <h1>Photo Viewer App</h1>\n                <div className=\"top-part\">\n                    <Filter setFilterTerm={this.setFilterTerm}/>\n                        <div>\n                      <h3>Toggle Grayscale</h3>\n                    <Checkbox className=\"ui toggle checkbox\" onClick={this.toggleSwitch} toggle >\n                    </Checkbox>\n                    </div>\n            \n                </div>\n                 <Divider hidden />\n                <Pagination  onPageChange={this.handlePage} size='mini' siblingRange=\"4\" defaultActivePage={this.state.imageIndex.page} totalPages={this.state.imageIndex.pages} />\n                </Container>\n                    <Divider hidden />\n                <Grid relaxed columns={5}>\n                  {this.filterPictures()}\n                </Grid>\n\n            </Container>\n            </div>\n        );\n    }\n}\n\nexport default ImageIndex;","import React, {Component} from 'react';\nimport './App.css';\nimport ImageIndex from './components/ImageIndex';\nclass App extends Component {\n  \n\n  render(){\n    return (\n      <div className=\"App\">\n        \n        <ImageIndex />\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}